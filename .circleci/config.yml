version: 2.1

orbs:
  docker: circleci/docker@2.2.0

executors:
  golang:
    docker:
      - image: cimg/go:1.20.1

jobs:
  install-dependencies:
    working_directory: ~/auth-ms
    executor: golang
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Install dependencies
          command: go mod download
      - run:
          name: Verify installation
          command: go mod verify
      - save_cache:
          paths:
            - "/go/pkg/mod"
          key: go-mod-v4-{{ checksum "go.sum" }}
  build-application:
    working_directory: ~/auth-ms
    executor: golang
    environment:
      SERVER_ADDRESS: "staging.api.vesicash.com"
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Create environment variable
          command: cp app-sample.env app.env
      - run:
          name: Configure environment variables
          command: |
            sed -i '/^MS_NOTIFICATION/d' app.env
            echo MS_NOTIFICATION: "${SERVER_ADDRESS}/v1/notifications" >> app.env
      - run:
          name: Build application
          command: go build -v -o vesicash-auth-ms
      - persist_to_workspace:
          root: .
          paths:
            - vesicash-auth-ms
            - app.env
  test-application:
    docker:
      - image: cimg/go:1.20.1
      - image: cimg/postgres:14.0
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: auth
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Run tests
          command: |
            cat app.env
            go test -v  ./tests/... -timeout 99999s
  generate-code-coverage-metrics:
    executor: golang
    steps:
      - checkout
      - run: go build
      - run:
          name: "Create a temp directory for artifacts"
          command: |
            mkdir -p /tmp/artifacts
      - run:
          command: |
            go test -coverprofile=c.out
            go tool cover -html=c.out -o coverage.html
            mv coverage.html /tmp/artifacts
      - store_artifacts:
          path: /tmp/artifacts
  check-and-build-only:
    executor: golang
    environment:
      REGISTRY: registry.digitalocean.com
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run: 
          command: |
            TAG=0.1.$CIRCLE_BUILD_NUM
            docker build -t $REGISTRY/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$TAG .
            echo $DOCKER_PASS | docker login $REGISTRY -u $DOCKER_USER --password-stdin
            docker push $REGISTRY/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$TAG

workflows:
  default:
    jobs:
      - install-dependencies
      - build-application:
          requires:
            - install-dependencies
      - test-application:
          requires:
            - build-application
      - generate-code-coverage-metrics:
          requires:
            - build-application
      - check-and-build-only:
          requires:
            - build-application
